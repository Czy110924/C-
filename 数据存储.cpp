//#define _CRT_SECURE_NO_WARNINGS 1
//#include <stdio.h>
//#include <string.h>
//
//
////int main()
////{
////	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
////	for (int i = 0; i <= 12; i++)
////	{
////		arr[i] = 0;
////		printf("hehe\n");
////	}
////	return 0;
////}
//
//
////数据类型的基本介绍
//	// 类型的基本归类
//	// 整型在内存中的储存
//	// 原码，反码，补码
//	// 大小端介绍
//	// 练习
////浮点型在内存中的储存
//	// 例子
//	// 浮点数存储规则
//
//
//
//int main()
//{
//	//数值有不同的表达形式，二，八，十，十六进制
//
//	//整数二进制表示有三种表示表示形式
//	// 1.正整数，原码，反码，补码相同
//	// 2.负整数，原码，反码，补码需要计算
//	//原码：直接通过正负的形式写出的二进制序列就是原码
//	//反码：原码的符号位不变，其它位按位取反就是反码
//	//补码：反码+1就是补码
//	//整型在内存中存的是补码的二进制序列
//
//
//
//	//为什么存放补码呢？
//	//使用补码可以将符号位，数值域统一处理
//	//同时，加法和减法也可以统一处理(CPU只有加法器)此外，
//	//补码与原码相互转换，其运算过程是相同的，不需要额外的硬件电路
//	//原码取反加一变补码
//	//补码取反加一变原码
//
//
//	//大小端
//	//正着存放  11 22 33 44 大端字节序存储
//	// 高位字节序内容放在低地址中，低位字节序内容放高地址中，整型从左到右由高位到低位
//	//反着存放  44 33 22 11 小端字节序存储
//	// 高位字节序内容放在高地址中，低位字节序内容放低地址中
//
//
//
//	//有符号的char 内存存储 00000000 ~ 11111111 ，首位符号位，数值-128~127
//	// -128那个数值用进行计算，直接解析成-128，用原反补的方式计算会变0
//	//有符号的char 内存存储 00000000 ~ 11111111 ，数值0~255
//
//	//同理有符号short ， 数值-32768~326767  
//	//有符号short ， 数值 0 ~ 65535
//	//所以 signed char a = -1  输出-1
//	//  -1原码100000000000000000000000001
//	//  补码111111111111111111111111111
//	//  存入char类型，截断变11111111
//	//  用%d输出，%d只输出有符号整型，发生整型提升，高位是1所以补1,1111111111111111111
//	//  无符号数整型提升高位直接补0，有符号数高位是1补1，是0补0
//	//  打印原码，取反加一，1000000000000000000000000001，所以打印出-1
//	//unsigned char a = -1  输出255，截取和大小端关系不大，因为是拿出来再截取低位
//	//  同样存入char类型 ，截断变11111111
//	//  %d输出有符号整数，整形提升，高位补0,000000000000000011111111 - 补码
//	//  高位是零，输出时是正数，原反补相同，所以输出00000000000000000011111111 - 原码 255
//
//	//char c = -128;
//	//printf("%u", c);//无符号直接原反补相同
//	//printf("%d", c);
//	//打印无符号数，原反补相同
//	//打印有符号数，要换成原码打印
//
//	unsigned int c = 0;
//	printf("%u", c - 1);
//
//
//	char a[1000];
//	int i;
//	for (i = 0; i < 1000; i++)
//	{
//		a[i] = -1 - i;
//	}
//	printf("%d", strlen(a));// 255
//	//每个字符只能容纳-128~127的数字
//	//所以数组为-1，-2，-3...-128,127,126...2,1,0，-1，-2
//	//识别到0的时候就停止了，字符0就代表\0
//	
//	/*00000001 1
//	01111111 127
//	10000000 -128
//	11111111 -127
//	11111110 -126*/
//	//在补码上进行操作
//
//	return 0;
//}
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
