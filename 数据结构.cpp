#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>


//int main()
//{
//	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
//	for (int i = 0; i <= 12; i++)
//	{
//		arr[i] = 0;
//		printf("hehe\n");
//	}
//	return 0;
//}


//数据类型的基本介绍
	// 类型的基本归类
	// 整型在内存中的储存
	// 原码，反码，补码
	// 大小端介绍
	// 练习
//浮点型在内存中的储存
	// 例子
	// 浮点数存储规则



int main()
{
	int a = 20;
	int b = -10;
	//数值有不同的表达形式，二，八，十，十六进制

	//整数二进制表示有三种表示表示形式
	// 1.正整数，原码，反码，补码相同
	// 2.负整数，原码，反码，补码需要计算
	//原码：直接通过正负的形式写出的二进制序列就是原码
	//反码：原码的符号位不变，其它位按位取反就是反码
	//补码：反码+1就是补码
	//整型在内存中存的是补码的二进制序列



	//为什么存放补码呢？
	//使用补码可以将符号位，数值域统一处理
	//同时，加法和减法也可以统一处理(CPU只有加法器)此外，
	//补码与原码相互转换，其运算过程是相同的，不需要额外的硬件电路
	//原码取反加一变补码
	//补码取反加一变原码


	//大小端
	//正着存放  11 22 33 44 大端字节序存储
	// 高位字节序内容放在低地址中，低位字节序内容放高地址中，整型从左到右由高位到低位
	//反着存放  44 33 22 11 小端字节序存储
	// 高位字节序内容放在高地址中，低位字节序内容放低地址中

	return 0;
}





















